from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from langchain.memory import CassandraChatMessageHistory, ConversationBufferMemory
from langchain.llms import OpenAI
from langchain import LLMChain, PromptTemplate
import json

cloud_config= {
  'secure_connect_bundle': 'secure-connect-choose-your-own-adventure.zip'
}

# This token JSON file is autogenerated when you download your token, 
# if yours is different update the file name below
with open("choose_your_own_adventure-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]
ASTRA_DB_KEYSPACE = ""
OPENAI_API_KEY = ""

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

message_history = CassandraChatMessageHistory( #stores message history
    session_id = "anything", #for if we want to access this history
    session = session,
    keyspace = ASTRA_DB_KEYSPACE,
    ttl_seconds = 3600 #stores memory for 60 minutes
)

message_history.clear()

cass_buff_memory = ConversationBufferMemory(
    memory_key = "chat_history",
    chat_memory = message_history #makes it easier to load into OpenAI prompt
)

template = """
The world is in peril, and your mission is to develop innovative solutions 
to combat the climate crisis. As the head scientist, you have access to 
cutting-edge technology and a team of experts. Your goal is to research, educate, 
and implement strategies to mitigate the environmental damage.

Here are some rules to follow:
1. Start by asking the player to choose their first choice 
2. Have a few paths that lead to success
3. Have some paths that lead to death. If the user dies generate a response that explains the death and ends in the text: "The End.", I will search for this text to end the game

Here is the chat history, use this to understand what to say next: {chat_history}
Human: {human_input}
AI:"""

#prompt template
prompt = PromptTemplate(
    input_variables = ["chat_history", "human_input"],
    template = template
)

llm = OpenAI(openai_api_key=OPENAI_API_KEY)
llm_chain = LLMChain(
    llm=llm,
    prompt=prompt,
    memory=cass_buff_memory
)

response = llm_chain.predict(human_input = "start the game")

choice = "start"

while True:
    response = llm_chain.predict(human_input = choice)
    print(response.strip())

    if "The End." in response:
        break
    
    choice = input("Your reply: ")
